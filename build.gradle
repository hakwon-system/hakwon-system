plugins {
    id 'war'
    id 'java'
    id 'org.springframework.boot' version '2.7.8-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.ld'
version = '0.0.1-SNAPSHOT'
apply plugin: 'war'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}
bootWar.enabled = true
war.enabled = true
dependencies {
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'org.json:json:20200518'
// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
// 팝빌 연동
    implementation 'kr.co.linkhub:popbill-spring-boot-starter:1.7.1'
// https://mvnrepository.com/artifact/javax.inject/javax.inject
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'javax.servlet:jstl'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

}
bootWar {
    archiveName("Leader.war")
}


tasks.named('test') {
    useJUnitPlatform()
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}